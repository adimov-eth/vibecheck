name: Test Suite

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - security

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./check
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.9
      
      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            check/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('check/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: 📦 Install dependencies
        run: bun install
      
      - name: 🏗️ Setup test database
        run: |
          bun run db:migrate
          echo "Test database initialized"
      
      - name: 🧪 Run all tests (default)
        if: github.event.inputs.test-type == 'all' || github.event.inputs.test-type == ''
        run: |
          bun run test:unit
          bun run test:integration || true
          bun run test:security
          bun run test src/e2e || true
      
      - name: 🔬 Run unit tests only
        if: github.event.inputs.test-type == 'unit'
        run: bun run test:unit
      
      - name: 🔗 Run integration tests only
        if: github.event.inputs.test-type == 'integration'
        run: bun run test:integration
      
      - name: 🌐 Run E2E tests only
        if: github.event.inputs.test-type == 'e2e'
        run: bun test src/e2e
      
      - name: 🔐 Run security tests only
        if: github.event.inputs.test-type == 'security'
        run: bun run test:security
      
      - name: 📊 Generate coverage report
        if: always()
        run: |
          bun run test:coverage:report || true
      
      - name: 📤 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.node-version }}
          path: check/coverage/
          retention-days: 7
      
      - name: 📊 Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          file: ./check/coverage/lcov.info
          flags: backend
          name: backend-node-${{ matrix.node-version }}
          fail_ci_if_error: false

  test-summary:
    name: Test Summary
    needs: [backend-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          path: coverage-artifacts
      
      - name: 📊 Generate test report
        run: |
          echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Node Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for version in 18 20; do
            if [ -d "coverage-artifacts/coverage-reports-$version" ]; then
              echo "| Node $version | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Node $version | ❌ Failed/Skipped |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports have been uploaded as artifacts and to Codecov." >> $GITHUB_STEP_SUMMARY
      
      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🧪 Test Results
            
            Tests have completed. Check the [Actions tab](${context.payload.pull_request.html_url.replace('/pull/', '/actions/runs/')}) for detailed results.
            
            - 📊 Coverage reports uploaded to Codecov
            - 📁 Test artifacts available in workflow run
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });