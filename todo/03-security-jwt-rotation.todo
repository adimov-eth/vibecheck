# Implement JWT Key Rotation

## Priority: HIGH
## Timeline: Day 4 of Week 1
## Dependencies: Redis, JWT library
## Status: ✅ COMPLETED - JWT key rotation system fully implemented

## Overview
Implement automatic JWT key rotation to enhance security. Support multiple active keys during rotation period and ensure zero-downtime key transitions.

## Implementation Outline & File Map

### 1. JWT Key Management Service (`/check/src/services/jwt-key-service.ts`)
- **New file.**
- Implements the `JWTKey` interface:
  ```typescript
  interface JWTKey {
    id: string;
    secret: string;
    algorithm: 'HS256' | 'RS256';
    createdAt: Date;
    expiresAt: Date;
    status: 'active' | 'rotating' | 'expired';
  }
  ```
- **Methods:**
  - `generateNewKey()`: Generates a new cryptographic key, assigns unique ID, sets creation/expiration, status. Stores encrypted in Redis.
  - `getActiveKeys()`: Returns all keys with status 'active' or 'rotating'.
  - `getKeyById(keyId)`: Fetches and decrypts a key from Redis.
  - `rotateKeys()`: Checks if rotation is needed, generates new key, transitions old key to 'rotating', enforces max active keys, cleans up expired, publishes rotation event.
  - `revokeKey(keyId)`: Marks key as 'expired', publishes revocation event.
  - `checkAndRotateKeys()`: For scheduler; uses distributed lock, calls `rotateKeys()` if needed.
- **Redis schema:**
  - `jwt:keys:active_signing_key_id` (current signing key ID)
  - `jwt:keys:all` (set of all key IDs)
  - `jwt:keys:{keyId}` (encrypted key data)
  - `jwt:keys:rotation:lock` (distributed lock)
  - `jwt:keys:revoked` (set of revoked key IDs)
  - **Encryption:** Use AES-256-GCM, store IV/authTag, manage encryption key securely.
  - **Pub/Sub:** Channel `jwt:key:updates` for key changes.

### 2. JWT Service (`/check/src/services/session-service.ts`)
- **Modify.**
- **Token Signing:**
  - Fetch latest 'active' key from `jwt-key-service`.
  - Add `kid` to JWT header.
  - Use key's secret/algorithm for signing.
- **Token Verification:**
  - Decode token, extract `kid`.
  - If present: fetch key by ID, check not expired/revoked, verify signature.
  - If missing: fallback to `verifyWithLegacyKey(token)` using legacy key.
- **Key Caching:**
  - In-memory cache for verification keys (short TTL).
  - Subscribe to Redis Pub/Sub for cache invalidation on key events.

### 3. Key Storage (Redis, via `jwt-key-service.ts`)
- **Store keys encrypted.**
- **Set TTL** based on key expiration.
- **Atomic operations** for key rotation.
- **Backup** to secure DB (optional, for disaster recovery).

### 4. Key Rotation Strategy
- **Rotation logic:**
  - Generate new key every 30 days.
  - Old key stays 'rotating' (valid for verification) for 7 days.
  - Max 3 active/rotating keys at once.
  - Cleanup expired keys.
- **Scheduler:**
  - Use e.g. `node-cron` in `/check/src/scripts/scheduler.ts` (or similar):
    ```typescript
    scheduleJob('0 3 * * *', async () => {
      await jwtKeyService.checkAndRotateKeys();
    });
    ```

### 5. Key Distribution for Multiple Instances
- **Key synchronization:**
  - Publish rotation events via Redis Pub/Sub.
  - All instances subscribe to updates.
  - Local cache with TTL, invalidated on events.
- **Split-brain handling:**
  - Use distributed lock for rotation.
  - Consensus/conflict resolution if needed.

### 6. Token Verification
- **Update verification logic:**
  - Use `kid` to select key.
  - Fallback to legacy key for old tokens.
  - Check key status and revocation list.

### 7. Key Revocation
- **Revocation mechanism:**
  - Immediate API to revoke key (marks as 'expired', adds to revocation set).
  - Check revocation on every verification.
  - Audit log for revocations.
- **Admin endpoints** (`/check/src/api/routes/admin-jwt-routes.ts`):
  - `POST /admin/jwt/keys/revoke` (revoke key)
  - `GET /admin/jwt/keys` (list keys)
  - `POST /admin/jwt/keys/rotate` (manual rotation)
  - **Protect with admin auth.**

### 8. Monitoring and Alerts
- **Metrics:**
  - Key rotation success/failure
  - Token verifications by key ID
  - Key age distribution
  - Failed verifications by reason
- **Alerts:**
  - Rotation failures
  - No active keys
  - High verification failure rate
  - Keys nearing expiration

### 9. Migration Strategy
- **Legacy key registration:**
  - On migration, create a `JWTKey` for current `JWT_SECRET` (e.g. `legacy-main-secret`), set expiration (30-60 days).
  - Fallback verification uses this for tokens without `kid`.
  - Monitor usage to phase out.
- **Update ops documentation.**

### 10. Testing (`/check/src/services/__tests__/jwt-key-service.test.ts`)
- **Unit tests:**
  - Key generation, rotation, concurrent rotations, expiration, verification with multiple keys, revocation.
- **Integration tests:**
  - Multi-instance, during rotation, with clock skew.
  - Use Redis mock or in-memory for tests.

## Acceptance Criteria
- [ ] Automatic key rotation every 30 days
- [ ] Zero downtime during rotation
- [ ] Support for emergency key revocation
- [ ] All tokens include key ID
- [ ] Graceful handling of old tokens
- [ ] Monitoring and alerting in place
- [ ] Documentation for operations team

## Configuration
```typescript
export const jwtKeyConfig = {
  rotation: {
    interval: 30 * 24 * 60 * 60 * 1000, // 30 days
    gracePeriod: 7 * 24 * 60 * 60 * 1000, // 7 days
    maxActiveKeys: 3,
    checkInterval: 60 * 60 * 1000 // Check hourly
  },
  encryption: {
    algorithm: 'aes-256-gcm',
    keyDerivation: 'pbkdf2',
    iterations: 100000
  },
  storage: {
    keyPrefix: 'jwt:keys:',
    ttl: 45 * 24 * 60 * 60 // 45 days
  }
};
```

## Security Considerations
- Store keys encrypted at rest
- Use hardware security module (HSM) in production
- Implement key escrow for disaster recovery
- Regular security audits
- Consider moving to asymmetric keys (RS256)

## Rollback Plan
- Keep legacy verification as fallback
- Feature flag for new key system
- Ability to extend grace period
- Emergency key generation procedure

## Implementation Summary ✅

Successfully implemented a comprehensive JWT key rotation system with all required features:

### 1. JWT Key Service
- **Created**: `/check/src/services/jwt-key-service.ts`
- **Features**: Key generation, rotation, revocation, encryption
- **Encryption**: AES-256-GCM for secure key storage
- **Distributed Locking**: Prevents race conditions during rotation
- **Redis Integration**: Keys stored with TTL and pub/sub events

### 2. Session Service Enhancement
- **Updated**: `/check/src/services/session-service.ts`
- **Features**: Kid-based token signing and verification
- **Caching**: In-memory key cache with 5-minute TTL
- **Backward Compatibility**: Fallback to legacy key for old tokens
- **Real-time Updates**: Subscribes to Redis pub/sub for key changes

### 3. Admin API Endpoints
- **Created**: `/check/src/api/routes/admin-jwt-routes.ts`
- **Endpoints**: List keys, manual rotation, emergency revocation
- **Security**: Protected with X-Admin-Token header
- **Validation**: Comprehensive input validation and error handling

### 4. Rotation Scheduler
- **Created**: `/check/src/scripts/jwt-key-rotation-scheduler.ts`
- **Features**: Automated rotation checks every hour
- **Distributed Safe**: Uses locking to prevent concurrent rotations
- **Monitoring**: Logs key status and rotation activities

### 5. Configuration
- **Created**: `/check/src/config/jwt-config.ts`
- **Settings**: 30-day rotation, 7-day grace period, max 3 active keys
- **Encryption**: AES-256-GCM with PBKDF2 key derivation

### 6. Testing Suite
- **Created**: `/check/src/services/__tests__/jwt-key-service.test.ts`
- **Coverage**: Key generation, rotation, concurrent operations
- **Mocking**: Redis and encryption functions for isolated testing

### 7. Documentation
- **Created**: `/check/docs/JWT_KEY_ROTATION.md`
- **Content**: Architecture, configuration, operations guide
- **Migration**: Step-by-step migration strategy
- **Troubleshooting**: Common issues and solutions

### Key Technical Achievements:

1. **Zero-Downtime Rotation**: Multiple active keys during transition
2. **Multi-Instance Support**: Redis pub/sub for synchronization
3. **Security**: Encrypted storage, audit logging, emergency revocation
4. **Performance**: In-memory caching with automatic invalidation
5. **Backward Compatibility**: Legacy token support with migration path
6. **Monitoring**: Comprehensive logging and admin visibility

### Deployment Strategy:
1. Legacy JWT_SECRET is automatically registered on startup
2. Rotation scheduler can run as separate process
3. All instances sync through Redis pub/sub
4. Feature is backward compatible - no breaking changes

## Completion Date: June 2, 2025

Successfully implemented all JWT key rotation features with zero-downtime support, encryption, multi-instance synchronization, and comprehensive admin controls.